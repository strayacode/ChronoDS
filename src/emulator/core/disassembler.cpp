#include <emulator/common/types.h>
#include <emulator/common/arithmetic.h>
#include <stdio.h>

enum {
    LSL = 0b00,
    LSR = 0b01,
};

void disassemble_branch(u32 opcode) {
    printf("b\n");
}

void disassemble_data_processing_immediate(u32 opcode) {
    u8 instruction_type = get_bit_range(21, 24, opcode);
    u8 rd, rn, rm;
    switch (instruction_type) {
    case 0b1101:
        // mov
        rd = get_bit_range(12, 15, opcode);
        u8 shift = get_bit_range(8, 11, opcode);
        u8 immediate = opcode & 0xFF;
        u32 op2 = rotate_right(immediate, shift * 2);
        printf("mov r%d, #%d\n", rd, op2);
        break;
    }
}

void disassemble_data_processing_register(u32 opcode) {
    u8 instruction_type = get_bit_range(21, 24, opcode);
    // these are used commonly
    u8 rd, rn, rm;
    switch (instruction_type) {
    case 0b0000:
        // and
        // get the distination register
        u8 rd = get_bit_range(12, 15, opcode);
        u8 shift_type = get_bit_range(5, 6, opcode);
        u8 rn = get_bit_range(16, 19, opcode);

        u8 rm = opcode & 0xF;
        // correct this later
        if (shift_type == LSL) {
            printf("andeq r%d, r%d, r%d, lsl\n", rd, rn, rm);
        } else if (shift_type == LSR) {
            printf("andeq r%d, r%d, r%d, lsr\n", rd, rn, rm);
        }
        
        break;
    }
}

void disassemble_instruction(u32 opcode) {
    u32 index = ((opcode >> 16) & 0xFF0) | ((opcode >> 4) & 0xF);
    switch (index) {
    case 0x000: case 0x008: case 0x00A:
        disassemble_data_processing_register(opcode); break;
    case 0x3A0: case 0x3A1: case 0x3A2: case 0x3A3:
    case 0x3A4: case 0x3A5: case 0x3A6: case 0x3A7:
    case 0x3A8: case 0x3A9: case 0x3AA: case 0x3AB:
    case 0x3AC: case 0x3AD: case 0x3AE: case 0x3AF:
        disassemble_data_processing_immediate(opcode); break;

    // execute arm instruction
    case 0xA00: case 0xA01: case 0xA02: case 0xA03:
    case 0xA04: case 0xA05: case 0xA06: case 0xA07:
    case 0xA08: case 0xA09: case 0xA0A: case 0xA0B:
    case 0xA0C: case 0xA0D: case 0xA0E: case 0xA0F:
    case 0xA10: case 0xA11: case 0xA12: case 0xA13:
    case 0xA14: case 0xA15: case 0xA16: case 0xA17:
    case 0xA18: case 0xA19: case 0xA1A: case 0xA1B:
    case 0xA1C: case 0xA1D: case 0xA1E: case 0xA1F:
    case 0xA20: case 0xA21: case 0xA22: case 0xA23:
    case 0xA24: case 0xA25: case 0xA26: case 0xA27:
    case 0xA28: case 0xA29: case 0xA2A: case 0xA2B:
    case 0xA2C: case 0xA2D: case 0xA2E: case 0xA2F:
    case 0xA30: case 0xA31: case 0xA32: case 0xA33:
    case 0xA34: case 0xA35: case 0xA36: case 0xA37:
    case 0xA38: case 0xA39: case 0xA3A: case 0xA3B:
    case 0xA3C: case 0xA3D: case 0xA3E: case 0xA3F:
    case 0xA40: case 0xA41: case 0xA42: case 0xA43:
    case 0xA44: case 0xA45: case 0xA46: case 0xA47:
    case 0xA48: case 0xA49: case 0xA4A: case 0xA4B:
    case 0xA4C: case 0xA4D: case 0xA4E: case 0xA4F:
    case 0xA50: case 0xA51: case 0xA52: case 0xA53:
    case 0xA54: case 0xA55: case 0xA56: case 0xA57:
    case 0xA58: case 0xA59: case 0xA5A: case 0xA5B:
    case 0xA5C: case 0xA5D: case 0xA5E: case 0xA5F:
    case 0xA60: case 0xA61: case 0xA62: case 0xA63:
    case 0xA64: case 0xA65: case 0xA66: case 0xA67:
    case 0xA68: case 0xA69: case 0xA6A: case 0xA6B:
    case 0xA6C: case 0xA6D: case 0xA6E: case 0xA6F:
    case 0xA70: case 0xA71: case 0xA72: case 0xA73:
    case 0xA74: case 0xA75: case 0xA76: case 0xA77:
    case 0xA78: case 0xA79: case 0xA7A: case 0xA7B:
    case 0xA7C: case 0xA7D: case 0xA7E: case 0xA7F:
    case 0xA80: case 0xA81: case 0xA82: case 0xA83:
    case 0xA84: case 0xA85: case 0xA86: case 0xA87:
    case 0xA88: case 0xA89: case 0xA8A: case 0xA8B:
    case 0xA8C: case 0xA8D: case 0xA8E: case 0xA8F:
    case 0xA90: case 0xA91: case 0xA92: case 0xA93:
    case 0xA94: case 0xA95: case 0xA96: case 0xA97:
    case 0xA98: case 0xA99: case 0xA9A: case 0xA9B:
    case 0xA9C: case 0xA9D: case 0xA9E: case 0xA9F:
    case 0xAA0: case 0xAA1: case 0xAA2: case 0xAA3:
    case 0xAA4: case 0xAA5: case 0xAA6: case 0xAA7:
    case 0xAA8: case 0xAA9: case 0xAAA: case 0xAAB:
    case 0xAAC: case 0xAAD: case 0xAAE: case 0xAAF:
    case 0xAB0: case 0xAB1: case 0xAB2: case 0xAB3:
    case 0xAB4: case 0xAB5: case 0xAB6: case 0xAB7:
    case 0xAB8: case 0xAB9: case 0xABA: case 0xABB:
    case 0xABC: case 0xABD: case 0xABE: case 0xABF:
    case 0xAC0: case 0xAC1: case 0xAC2: case 0xAC3:
    case 0xAC4: case 0xAC5: case 0xAC6: case 0xAC7:
    case 0xAC8: case 0xAC9: case 0xACA: case 0xACB:
    case 0xACC: case 0xACD: case 0xACE: case 0xACF:
    case 0xAD0: case 0xAD1: case 0xAD2: case 0xAD3:
    case 0xAD4: case 0xAD5: case 0xAD6: case 0xAD7:
    case 0xAD8: case 0xAD9: case 0xADA: case 0xADB:
    case 0xADC: case 0xADD: case 0xADE: case 0xADF:
    case 0xAE0: case 0xAE1: case 0xAE2: case 0xAE3:
    case 0xAE4: case 0xAE5: case 0xAE6: case 0xAE7:
    case 0xAE8: case 0xAE9: case 0xAEA: case 0xAEB:
    case 0xAEC: case 0xAED: case 0xAEE: case 0xAEF:
    case 0xAF0: case 0xAF1: case 0xAF2: case 0xAF3:
    case 0xAF4: case 0xAF5: case 0xAF6: case 0xAF7:
    case 0xAF8: case 0xAF9: case 0xAFA: case 0xAFB:
    case 0xAFC: case 0xAFD: case 0xAFE: case 0xAFF:
        disassemble_branch(opcode); break;
     
    }
    
}